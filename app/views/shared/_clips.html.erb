<% unless @song %>
    <h2 style="text-align: center;">No Segmented Audio Zip File Found </h2>
<% else %>

<!-- Songs Segment Area Start -->
<% currentIndex = 1 %>
<div id="song-clips" class="row song-clips" data-id="<%=@song.id%>">
    <!-- Songs Details Area Start -->
    <div class="row" style="margin-bottom: 50px;">
        <div class="col-md-4">
            <ul id="song-info" style="list">
                <li><p>Song Configuration</p></li>
                <li class="name-editor" type="song-name">
                    <span class="name" data-name="<%= @song.name %>" title="Click to edit...">Name: <%= @song.name %></span>
                    <div class="edit"> 
                        <%= form_for(@song, :remote => true, method: :put) do |f| %>
                            <label for="song_name">Name:</label>
                            <%= f.text_field :name, required: true %>
                        <% end %>
                    </div>
                </li>
                <li><p>Time: <%= Time.at(@song.duration).utc.strftime("%M:%S") %></p></li>
            </ul>            
        </div>
        <div class="col-md-8">
            <p>Part Configuration</p>
        </div>
    </div>
    <!-- Songs Details Area End -->
    <div class="row">
        <div class="col-md-9">
        <% bottomLevels = %w(intro Verse1 Inst Chorus1 Breakdown Verse2 Verse3 Outro) %>
        <% clips = @song.readZipFile %>
        <% unless clips %>
            <h2>Please upload proper ZIP File</h2>
        <% else %>
            <% clips.each_with_index do |(key, value), r| %>
                <% r += 1 %>
                <div id="clips-<%=r%>" class="clips<%=' focus' if r == currentIndex %>">
                    <div class="part-play-btn" data-row="<%=r%>"></div>
                    <% value.each_with_index do |clip, c| %>
                        <% c += 1 %>
                        <% if c == 5 %>
                            <div class="clip bordered">
                                <div class="play-btn"></div>
                            </div>
                        <% end %>
                        <% if r == 1 %>
                          <div class="level left"><%=clip[:level]%></div>
                        <% end %>
                        <% clipSate = @song.clipState(r, c) %>
                        <div id="clip-part-<%=r%>-<%=c%>" class="clip clip-<%=c%><%=' muted' unless clipSate%>" data-row="<%=r%>" data-column="<%=c%>" data-path="<%=clip[:filePath]%>" data-state="<%=clipSate%>">
                            <div class="opaque-gray"></div>
                            <div class="play-btn"></div>
                        </div>
                    <% end %>
                    <div class="level"><%=bottomLevels[r-1]%></div>
                </div>
            <% end %>
        <% end %>
        </div>
        <div class="col-md-3">
            <div class="iPhone">
                <div class="mic"></div>
                <div class="speaker"></div>
                <div class="home-btn"></div>
            </div>
        </div>
    </div>
</div>
<!-- Songs Segment Area End -->

<script type="text/javascript">
     var index = <%= currentIndex %>; 
     console.log("index ", index);
     window.sounds = sounds = {};
     window.wavesurfers = wavesurfers = {};
     function intializeSoundClips() {
        var i = 1;
        var sound = wavesurfer = null;
        $(".clips").each(function(){
          sounds[i] = wavesurfers[i] = {};
          j = 1
          $(this).find('.clip').each(function(){
            if ($(this).hasClass('bordered')) { return };
            sound = new Audio($(this).data('path')); 
            sound.container = this;     
            sounds[i][j] = sound;
            sounds[i][j].buffered;
            if (!$(this).data('state')) {
                sounds[i][j].volume = 0;
            };
            sounds[i][j].addEventListener('loadedmetadata', function() {
                // console.log("Playing " + this.src + ", for: " + this.duration + "seconds.");
                showWaveForm(this);
            });

            j++;
          })
          i++;
        });
        window.sounds = sounds;
        // playNext();
     }

     function showWaveForm(sound) {
        var wavesurfer = Object.create(WaveSurfer);
        wavesurfer.init({
            container: sound.container,
            fillParent: true,
            height: 17,
            waveColor: 'black',
            progressColor: 'purple',
            splitChannels: true
        });
        // wavesurfer.on('ready', function () {
        //     wavesurfer.play();
        // });
        wavesurfer.load(sound.src);
    }

     playNext = function() {
        if (index > $(".clips").length) { return };
        sounds[index][8].addEventListener("ended", clipEndedCallback);  
     }

     clipEndedCallback = function() {
        console.log(index+ " part's clip ended. Playing next !!!");
        $("#clips-"+index).removeClass('focus').removeClass('playing');
        
        index++; 
        if (index > 8) { 
          index = 1;
          $(".full-play-btn").removeClass('playing');
          $("#clips-"+index).addClass('focus').removeClass('playing');
          playNext();    
          return; 
        };

        playNext();
        $("#clips-"+index).addClass('focus');
        for (var i = 1; i <= 8; i++) {
            var sound = sounds[index][i];
            sound.play();
        };
     }

     partClipEndedCallback = function() {
        console.log(index+ " Part's clip ended !!!");
        $("#clips-"+index).removeClass('playing');
        sounds[index][8].removeEventListener("ended", partClipEndedCallback);  
        window.isPartPlayerStarted = false;
        for (var i = 1; i <= 8; i++) {
            var sound = sounds[index][i];
            if (!sound.paused) sound.pause();
            sound.currentTime = 0;
        };
     }

     // Intialize all sound clips for play
     // intializeSoundClips();

     function saveSongInfo(event, name) {
        $(".name-editor > .name")
            .text("Name: "+$(event.target).val())
            .attr('data-name',$(event.target).val());
     }

     $(document).ready(function(){
        $(".name-editor > .name").click(function(event){
            event.stopPropagation();
            $(event.target).parent().addClass('editing');
            $(event.target).parents('.name-editor').find('input').focus().val($(event.target).attr('data-name'))
        });

        $(".name-editor input[type='text']").on('keypress',function(event){
            if (event.keyCode == 13) { event.target.blur(); };
        });

        $(".name-editor input[type='text']").on('blur',function(event){
            event.stopPropagation();
            $(event.target).parents('.name-editor').removeClass('editing');
            saveSongInfo(event, $(event.target).val());
            
            // Update song name
            $.ajax({
                type: "PUT",
                dataType: "json",
                url: $(event.target).parent().attr('action'),
                contentType: 'application/json',
                data: JSON.stringify({name: $(event.target).val() })
            }).done(function( song ){
                if (song && song.name) {
                    saveSongInfo(event, song.name);    
                };
            });
        });

        // Intialize all sound clips for play
        intializeSoundClips();

        $(".part-play-btn").click(function(event){
            event.stopPropagation();
            var row = $(event.target).data('row');
            if (row != index) { return };

            // Stop any signle player
            stopSinglePlayer(true);

            // Play or Paused Sound Clips
            for (var i = 1; i <= 8; i++) {
                var sound = sounds[index][i];
                if (!window.isPartPlayerStarted) {
                    sound.currentTime = 0;
                    sound.pause();
                };

                if (sound.paused) {
                    $(event.target).parent().addClass('playing');
                    sound.play();
                } else {
                    $(event.target).parent().removeClass('playing');
                    sound.pause();
                }
            };

            // If playing or not played yet from main player
            if (!window.isPartPlayerStarted) {
                $(".full-play-btn").removeClass('playing');
                sounds[index][8].removeEventListener("ended", clipEndedCallback); 
                sounds[index][8].addEventListener("ended", partClipEndedCallback);  
                window.isPartPlayerStarted = true;
            };
        });

        $(".clip").click(function(event){
            event.stopPropagation();
            var row = $(event.target).data('row');
            var column = $(event.target).data('column');
            $(event.target).toggleClass('muted');
            var sound = sounds[row][column];
            if(sound.volume == 0) {
                sound.volume = 1;
            } else {
                sound.volume = 0;
            } 
            var song_id = $(event.target).parents(".song-clips").data('id');
            var state_url = "/songs/"+song_id+"/clips/state"
            $.post(state_url,{ clip: { row: row, column: column, state: sound.volume } } );
        });

        var singleSound = false;
        var singleSoundRow = 0;
        var singleSoundColumn = 0;
        $(".clip .play-btn").click(function(event){
            event.stopPropagation();
            var row = $(event.target).parent().data('row');
            var column = $(event.target).parent().data('column');
            if (!row || !column) { return };

            // If already playing same audio file
            if (singleSoundRow == row && singleSoundColumn == column) {
                if (singleSound.paused) {
                    $(event.target).addClass('paused');
                    singleSound.play();
                } else {
                    $(event.target).removeClass('paused');
                    singleSound.pause();    
                }
                return;
            };

            sounds[index][8].removeEventListener("ended", clipEndedCallback); 
            $(".clips.playing").removeClass('playing');
            for (var i = 1; i <= 8; i++) {
                var sound = sounds[index][i];
                if (sound.duration > 0) { sound.currentTime = 0; };
                if (!sound.paused) { sound.pause(); };
            }; 

            singleSoundRow = row;
            singleSoundColumn = column;
            stopSinglePlayer(false);

            $(event.target).addClass('paused');
            singleSound = sounds[row][column];
            singleSound.currentTime = 0;
            singleSound.play();
            singleSound.addEventListener("ended", singleClipEndedCallback); 
            window.isPartPlayerStarted = false;
        });

        singleClipEndedCallback = function() {
            singleSound.currentTime = 0;
            singleSound.pause();
            $(".play-btn").removeClass("paused");
        }

        stopSinglePlayer = function(reset) {
            if (singleSound) {
                $(".play-btn").removeClass("paused");
                if (singleSound.duration > 0) singleSound.currentTime = 0;
                if (!singleSound.paused) singleSound.pause();
                singleSound.removeEventListener("ended", singleClipEndedCallback); 
                if (reset && singleSoundRow != 0) {
                    singleSoundRow = singleSoundColumn= 0;
                    playNext();
                }
                singleSound = false;
            };
        }
     });
 </script>
 <% end %>