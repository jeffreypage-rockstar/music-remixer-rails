<!-- Songs Segment Area Start -->
<% currentIndex = 1 %>
<div id="song-clips" class="row song-clips" data-id="<%=@song.id%>">
    <!-- Songs Details Area Start -->
    <div class="row" style="margin-bottom: 50px;">
        <div class="col-md-4">
            <ul id="song-info">
                <li><p>Song Configuration</p></li>
                <li class="name-editor" type="song-name">
                    <span class="name" data-name="<%= @song.name %>" title="Click to edit...">Name: <%= @song.name %></span>
                    <div class="edit"> 
                        <%= form_for(@song, :remote => true, method: :put) do |f| %>
                            <label for="song_name">Name:</label>
                            <%= f.text_field :name, required: true %>
                        <% end %>
                    </div>
                </li>
                <li><p>Time: <%= Time.at(@song.duration).utc.strftime("%M:%S") %></p></li>
            </ul>            
        </div>
        <div class="col-md-8">
            <ul id="part-info">
                <li><p>Part Configuration</p></li>
                <% @part = @song.parts.first%>
                <li class="name-editor" type="part-name">
                    <span class="name" data-name="<%= @part.name %>" title="Click to edit...">Name: <%= @part.name %></span>
                    <div class="edit"> 
                        <%= form_for([@song, @part], :remote => true, method: :put) do |f| %>
                            <label for="part_name">Name:</label>
                            <%= f.text_field :name, required: true %>
                        <% end %>
                    </div>
                </li>
                <li><p id="part-time">Time: <%= Time.at(@part.duration).utc.strftime("%M:%S") %></p></li>
            </ul> 
        </div>
    </div>
    <!-- Songs Details Area End -->
    <div class="row">
        <div class="col-md-9">
        <% @song.parts.each_with_index do |part, c| %>
            <% c += 1 %>
            <div id="clips-<%=c%>" class="clips<%=' focus' if c == currentIndex %>" data-column="<%=c%>">
                <div class="part-play-btn<%=' disabled' if c == currentIndex %>"></div>
                <% part.clips.each_with_index do |clip, r| %>
                    <% r += 1 %>
                    <% if r == 5 %>
                        <div class="blank">
                            <div class="play-btn"></div>
                        </div>
                    <% end %>
                    <% if c == 1 %>
                      <div class="level left"><%=clip.level_name%></div>
                    <% end %>
                    <div id="clip-part-<%=c%><%=r%>" class="clip clip-<%=r%><%=' muted' if clip.state%>" data-id="<%=clip.id%>" data-row="<%=r%>" data-path="<%=clip.file%>" data-state="<%=clip.state%>">
                        <div class="progress"></div>
                        <div class="opaque-gray"></div>
                        <div class="play-btn"></div>
                    </div>
                <% end %>
                <div class="level column" data-id="<%=part.id%>" data-name="<%=part.name%>" data-time="<%= Time.at(part.duration).utc.strftime("%M:%S") %>"><%=part.name%></div>
            </div>
        <% end %>
        </div>
        <div class="col-md-3">
            <div class="iPhone">
                <div class="mic"></div>
                <div class="speaker"></div>
                <div class="home-btn"></div>
            </div>
        </div>
    </div>
</div>
<!-- Songs Segment Area End -->
<script type="text/javascript">
    // Predefined Varibales
    var index = <%= currentIndex %>;
    var clipPreviewPlayer = false;
    var clipPreviewPlayerRow = 0;
    var clipPreviewPlayerColumn = 0;

    function intializeAllPartClips() {
        var wavesurfer = null;
        $(".clips").each(function(){
            var column = $(this).attr('data-column');
            wavesurfers[column] = {};
            $(this).find('.clip').each(function(){
                if ($(this).hasClass('bordered')) { return };
                var row = $(this).attr('data-row');
                wavesurferPlayer(this, $(this).data('path'), $(this).data('state'), column, row);
            })
        });
    }

    function wavesurferPlayer(container, src, mute, column, row) {
        var wavesurfer = Object.create(WaveSurfer);
        wavesurfer.row = row;
        wavesurfer.column = column;
        wavesurfer.init({
            container: container,
            fillParent: true,
            height: 17,
            waveColor: 'black',
            progressColor: 'black',
            splitChannels: true
        });
        wavesurfer.on('ready', function (_this) {
            $(_this.container).addClass('loaded');
            if ($(_this.container).data('state')) {
                _this.toggleMute();
            };

            var clipColumn = $("#clips-"+index)
            if (clipColumn.children(".clip.loaded").length == 8) {
                clipColumn.children(".part-play-btn").removeClass('disabled');
            };
        });

        wavesurfer.on('loading', function (_this, progress) {
            $(_this.container).children(".progress").css("left", progress+"%");
        });

        wavesurfer.load(src);
        wavesurfers[column][row] = wavesurfer;
    }

    playNext = function() {
        if (index > $(".clips").length) { return };
        addRemoveEventListener(true);
    }

    function addRemoveEventListener(addListener) {
        var wavesurfer = wavesurfers[index]['8'];
        wavesurfer.unAll();
        if (addListener) {
            wavesurfer.on('finish', clipEndedCallback);
        }
    }

    clipEndedCallback = function() {
        if (index == 8) { 
            console.log(index+ " part's clip ended.");
            $("#clips-"+index).removeClass('playing');
            stopPartPlayers(true);
            return; 
        };
        console.log(index+ " part's clip ended. Playing next !!!");

        $("#clips-"+index).removeClass('focus').removeClass('playing');
        if (index < 8) index++; 
        $("#clips-"+index).addClass('focus').addClass('playing');
        showCurrentPartDetails();
        playNext();
        
        for (var i = 1; i <= 8; i++) {
            var wavesurfer = wavesurfers[index][i];
            wavesurfer.play();
        };
    }

    pausePartPlayer = function() {
        $(".clips.focus").removeClass('playing');
        for (var i = 1; i <= 8; i++) {
            var wavesurfer = wavesurfers[index][i];
            if (!wavesurfer.backend.isPaused()) wavesurfer.pause();
        };
    }

    stopPartPlayers = function(seek) {
        for (var i = 1; i <= 8; i++) {
            var wavesurfer = wavesurfers[index][i];
            wavesurfer.seekTo(0);
            if (!wavesurfer.backend.isPaused()) wavesurfer.pause();
        };
    }

     // Intialize all sound clips for play
     // intializeSoundClips();

    function updateSongInfo(event, name) {
        $(".name-editor > .name")
            .text("Name: "+$(event.target).val())
            .attr('data-name',$(event.target).val());
    }

    function showCurrentPartDetails() {
        var partElement = $("#clips-"+index).children(".level.column");
        $("#part-time").html("Time: "+partElement.data('time'));
        $("#part-info .name")
            .attr('data-name', partElement.data('name'))
            .text("Name: "+partElement.data('name'))
    }

    singleClipEndedCallback = function() {
        if (clipPreviewPlayer) {
            clipPreviewPlayer.seekTo(0);
            if (!clipPreviewPlayer.backend.isPaused()) clipPreviewPlayer.pause();
            $(".play-btn").removeClass("paused");
        };
    }

    pauseClipPreviewPlayer = function() {
        if (clipPreviewPlayer) {
            $(".play-btn").removeClass("paused");
            if (!clipPreviewPlayer.backend.isPaused()) clipPreviewPlayer.pause();
        }
    }

    stopClipPreviewPlayer = function(reset) {
        if (clipPreviewPlayer) {
            $(".play-btn").removeClass("paused");
            clipPreviewPlayer.seekTo(0);
            if (!clipPreviewPlayer.backend.isPaused()) clipPreviewPlayer.pause();
            clipPreviewPlayer.un('finish', singleClipEndedCallback);
            if (reset && clipPreviewPlayerRow != 0) {
                clipPreviewPlayerRow = clipPreviewPlayerColumn= 0;
                playNext();
            }
            clipPreviewPlayer = false;
        };
    }

    $(document).on('ready page:load', function () { 
        window.wavesurfers = wavesurfers = {};
        console.log("ready page:load called ================");

        $(".name-editor > .name").click(function(event){
            event.stopPropagation();
            if ($(event.target).parent().attr('type') == "part-name") { return };
            $(event.target).parent().addClass('editing');
            $(event.target).parents('.name-editor').find('input').focus().val($(event.target).attr('data-name'))
        });

        $(".name-editor input[type='text']").on('keypress',function(event){
            if (event.keyCode == 13) { event.target.blur(); };
        });

        $(".name-editor input[type='text']").on('blur',function(event){
            event.stopPropagation();
            $(event.target).parents('.name-editor').removeClass('editing');
            updateSongInfo(event, $(event.target).val());
            
            // Update song name
            $.ajax({
                type: "PUT",
                dataType: "json",
                url: $(event.target).parent().attr('action'),
                contentType: 'application/json',
                data: JSON.stringify({name: $(event.target).val() })
            }).done(function( song ){
                if (song && song.name) {
                    updateSongInfo(event, song.name);    
                };
            });
        });

        // Intialize all sound clips for play
        setTimeout(function(){
            intializeAllPartClips();    
        }, 700);
        
        $(".clips .level.column").click(function(event){
            event.stopPropagation();
            var column = $(event.target).parent().data('column');
            if (column == index) { return };

            // Paused Sound Clips
            stopPartPlayers(true);

            $("#clips-"+index).removeClass('focus').removeClass('playing');
            index = column;

            showCurrentPartDetails();
            $(event.target).parent().addClass('focus');
            playNext();
        });

        $(".clips .part-play-btn").click(function(event){
            event.stopPropagation();
            var column = $(event.target).parent().data('column');
            if (column != index) { return };

            // Stop any signle player
            stopTopPlayer();
            stopClipPreviewPlayer(true);

            // Attach Listener
            addRemoveEventListener(true);

            // Play or Paused Sound Clips
            for (var i = 1; i <= 8; i++) {
                var wavesurfer = wavesurfers[index][i];
                if (wavesurfer.backend.isPaused()) {
                    $(event.target).parent().addClass('playing');
                    wavesurfer.play();
                } else {
                    $(event.target).parent().removeClass('playing');
                    wavesurfer.pause();
                }
            };
        });

        $(".clip").click(function(event){
            event.stopPropagation();
            var row = $(event.target).data('row');
            var column = $(event.target).parent().data('column');
            $(event.target).toggleClass('muted');

            var wavesurfer = wavesurfers[column][row];
            wavesurfer.toggleMute();

            var volume = wavesurfer.isMuted ? 1 : 0;
            var song_id = $(event.target).parents(".song-clips").data('id');
            var update_clip_url = "/songs/"+song_id+"/clips/"+$(event.target).data('id')

            // Update song name
            var clip = { clip: { state: volume } };
            $.ajax({
                type: "PUT",
                dataType: "json",
                url: update_clip_url,
                contentType: 'application/json',
                data: JSON.stringify(clip)
            }).done(function( clip ){
                // console.log("", clip);
            });
        });

        $(".clip .play-btn").click(function(event){
            event.stopPropagation();
            var row = $(event.target).parents('.clip').data('row');
            var column = $(event.target).parents('.clips').data('column');
            if (!row || !column) { return };

            stopTopPlayer();
            
            // If already playing same audio file
            if (clipPreviewPlayerRow == row && clipPreviewPlayerColumn == column) {
                if (clipPreviewPlayer.backend.isPaused()) {
                    $(event.target).addClass('paused');
                    clipPreviewPlayer.play();
                } else {
                    $(event.target).removeClass('paused');
                    clipPreviewPlayer.pause();    
                }
                return;
            };

            addRemoveEventListener(false);
            $(".clips.playing").removeClass('playing');
            stopPartPlayers(true);

            clipPreviewPlayerRow = row;
            clipPreviewPlayerColumn = column;
            stopClipPreviewPlayer(false);

            $(event.target).addClass('paused');
            clipPreviewPlayer = wavesurfers[column][row];
            clipPreviewPlayer.seekTo(0);
            clipPreviewPlayer.play();
            clipPreviewPlayer.on('finish', singleClipEndedCallback);
            window.isPartPlayerStarted = false;
        });
    });

    $(document).on('page:before-change', function () {
      // Actions to do
      console.log("page:before-change called ================");
    });
 </script>