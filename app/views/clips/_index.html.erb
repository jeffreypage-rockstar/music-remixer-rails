<div class="audio-clips-bg"></div>
<% currentIndex = 1 %>
<!-- Clips Segment Area Start -->
<div class="levels">
    <% @song.clip_types.each_with_index do |clip_type, c| %>
        <% if c == 4 %>
        <div class="level left"></div>
        <% end %>
        <div class="level left"><%=clip_type.name%></div>
    <% end %>
</div>
<% @song.parts.each_with_index do |part, c| %>
    <% c += 1 %>
    <div id="clips-<%=c%>" class="clips<%=' focus' if c == currentIndex %>" data-column="<%=c%>">
        <div class="part-play-btn disabled"></div>
        <% part.clips.each_with_index do |clip, r| %>
            <% r += 1 %>
            <% if r == 5 %>
                <div class="blank">
                    <div class="play-btn"></div>
                </div>
            <% end %>
            <div id="clip-part-<%=c%><%=r%>" class="clip clip-<%=r%><%=' muted' if clip.state%>" data-id="<%=clip.id%>" data-row="<%=r%>" data-db-row="<%=r%>" data-path="<%=clip.file%>" data-state1="<%=clip.state%>" data-state2="<%=clip.state2%>" data-state3="<%=clip.state3%>" data-filetype="<%=clip.wing%>">
                <div class="progress"></div>
                <div class="opaque-gray"></div>
                <div class="play-btn"></div>
            </div>
        <% end %>
        <div class="level column" data-id="<%=part.id%>" data-name="<%=part.name%>" data-time="<%= Time.at(part.duration).utc.strftime("%M:%S") %>"><%=part.name%></div>
    </div>
<% end %>
<script type="text/javascript">
    // Predefined Varibales
    var loadColumn = 1;
    var index = <%= currentIndex %>;
    var clipPreviewPlayer = false;
    var clipPreviewPlayerRow = 0;
    var clipPreviewPlayerColumn = 0;

    $.fn.state = function() {
        var state = false;
        if (window.configuration == 'style-up') {
            state = $(this).attr('data-state2');
        } else if (window.configuration == 'style-down') {
            state = $(this).attr('data-state3');
        } else {
            state = $(this).attr('data-state1');    
        }
        if (state == 'true') { return true };
        return false;
    }

    $.fn.updateState = function(state) {
        if (window.configuration == 'style-up') {
            $(this).attr('data-state2', state);
        } else if (window.configuration == 'style-down') {
            $(this).attr('data-state3', state);
        }
        $(this).attr('data-state1', state);
    }

    updatePreview = function() {
        $(".wing").removeClass('muted');
        $("#audio-clips #clips-"+index).each(function(){
            $(this).find('.clip').each(function(){
                if ($(this).state()) {
                    $(".wing."+$(this).data('filetype')).addClass('muted');
                };
            });
        });
    }

    updatePreviewPlayBtn = function(playing) {
        $("#preview .playBtn").removeClass('playing');
        if (playing) {
            $("#preview .playBtn").addClass('playing');
        };    
    }

    updatePreviewForClip = function(clipFileType, state) {
        $(".wing."+clipFileType).removeClass('muted');    
        if (state) {
            $(".wing."+clipFileType).addClass('muted');    
        };
    }

    loadPartClips = function() {
        var wavesurfer = null;
        $("#audio-clips #clips-"+loadColumn).each(function(){
            var column = $(this).attr('data-column');
            wavesurfers[column] = {};
            $(this).find('.clip').each(function(){
                wavesurferPlayer(this, $(this).data('path'), $(this).state(), column, $(this).attr('data-row'));
            })
        });
    }

    reInitializeClipsState = function() {
        $("#audio-clips .clips").each(function(){
            var column = $(this).attr('data-column');
            $(this).find('.clip').each(function(){
                $(this).removeClass('muted');
                if ($(this).state()) { $(this).addClass('muted'); }
                if (wavesurfers[column]) {
                    var row = $(this).attr('data-row');
                    var wavesurfer = wavesurfers[column][row];
                    if (wavesurfer) {
                        if (($(this).state() && !wavesurfer.isMuted) || (!$(this).state() && wavesurfer.isMuted)) {
                            wavesurfer.toggleMute();
                            console.log("column : ", column, "row : ", row, "Mute = ", wavesurfer.isMuted);
                        }
                    }
                }
            })
        });
    }

    wavesurferPlayer = function(container, src, mute, column, row) {
        var wavesurfer = Object.create(WaveSurfer);
        wavesurfer.row = row;
        wavesurfer.column = column;
        wavesurfer.init({
            container: container,
            fillParent: true,
            height: 17,
            waveColor: 'black',
            progressColor: 'black',
            splitChannels: true
        });
        wavesurfer.on('ready', function (_this) {
            $(_this.container).addClass('loaded');
            if ($(_this.container).state()) {
                if (!_this.isMuted) {
                    _this.toggleMute();    
                };
            };
            isPartPlayerReady(_this.column);
            if (isAllClipsLoadedOfThisPart(_this.column)) {
                console.log(_this.column+" Part player is ready!");
                if (index == _this.column) addRemoveEventListener(true);
                if (loadColumn <= 7) {
                    loadColumn++;
                    loadPartClips();
                };
            };
        });

        wavesurfer.on('loading', function (_this, progress) {
            $(_this.container).children(".progress").css("left", progress+"%");
        });

        wavesurfer.load(src);
        wavesurfers[column][row] = wavesurfer;
    }

    isAllClipsLoadedOfThisPart = function(column) {
        var clipColumn = $("#clips-"+column)
        if (clipColumn.children(".clip.loaded").length == 8) return true;
        return false;
    }

    isPartPlayerReady = function(column) {
        if (isAllClipsLoadedOfThisPart(column)) {
            $("#clips-"+column).children(".part-play-btn").removeClass('disabled');
        }
    }

    playNext = function() {
        if (index > $("#audio-clips .clips").length) { return };
        addRemoveEventListener(true);
    }

    function addRemoveEventListener(addListener) {
        if (!wavesurfers[index]) { return };
        var wavesurfer = wavesurfers[index]['1'];
        if (wavesurfer) {
            wavesurfer.unAll();
            if (addListener) {
                wavesurfer.on('finish', clipEndedCallback);
            } 
        };
    }

    clipEndedCallback = function() {
        if (index == 8) { 
            console.log(index+ " part's clip ended.");
            $("#clips-"+index).removeClass('playing');
            stopPartPlayers(true);
            return; 
        };
        console.log(index+ " part's clip ended. Playing next !!!");

        $("#clips-"+index).removeClass('focus').removeClass('playing');
        if (index < 8) index++; 
        $("#clips-"+index).addClass('focus').addClass('playing');
        showCurrentPartDetails();
        playNext();
        
        for (var i = 1; i <= 8; i++) {
            var wavesurfer = wavesurfers[index][i];
            if (wavesurfer) {
                wavesurfer.play();    
            }
        };
    }

    pausePartPlayer = function() {
        if (!wavesurfers[index]) { return };
        $(".clips.focus").removeClass('playing');
        for (var i = 1; i <= 8; i++) {
            var wavesurfer = wavesurfers[index][i];
            if (wavesurfer) {
                if (!wavesurfer.backend.isPaused()) wavesurfer.pause();    
            };
        };
    }

    stopPartPlayers = function(seek) {
        if (!wavesurfers[index]) { return };
        for (var i = 1; i <= 8; i++) {
            var wavesurfer = wavesurfers[index][i];
            if (wavesurfer) {
                wavesurfer.seekTo(0);
                if (!wavesurfer.backend.isPaused()) wavesurfer.pause();    
            };
        };
    }

     // Intialize all sound clips for play
     // intializeSoundClips();
    function showCurrentPartDetails() {
        var partElement = $("#clips-"+index).children(".level.column");
        $("#part-time").html("Time: "+partElement.data('time'));
        $("#part-info .name")
            .attr('data-name', partElement.data('name'))
            .text("Name: "+partElement.data('name'))
        var songID = $("#song-clips").data('id');
        var partID = partElement.data('id');
        $("#part-info form").attr('action', "/songs/"+songID+"/parts/"+partID);
    }

    singleClipEndedCallback = function() {
        if (clipPreviewPlayer) {
            clipPreviewPlayer.seekTo(0);
            if (!clipPreviewPlayer.backend.isPaused()) clipPreviewPlayer.pause();
            $(".play-btn").removeClass("paused");
        };
    }

    pauseClipPreviewPlayer = function() {
        if (clipPreviewPlayer) {
            $(".play-btn").removeClass("paused");
            if (!clipPreviewPlayer.backend.isPaused()) clipPreviewPlayer.pause();
        }
    }

    stopClipPreviewPlayer = function(reset) {
        if (clipPreviewPlayer) {
            $(".play-btn").removeClass("paused");
            clipPreviewPlayer.seekTo(0);
            if (!clipPreviewPlayer.backend.isPaused()) clipPreviewPlayer.pause();
            clipPreviewPlayer.un('finish', singleClipEndedCallback);
            if (reset && clipPreviewPlayerRow != 0) {
                clipPreviewPlayerRow = clipPreviewPlayerColumn= 0;
                playNext();
            }
            clipPreviewPlayer = false;
        };
    }

    function clipDraggable(element, containment) {
        element.draggable({ 
            revert: true,
            containment: containment,
            axis: "y",
            zIndex: 1000
        });
    };

    function blankDroppable(element) {
        element.droppable({
            drop: function( event, ui ) {
                var column = $(this).parent().data('column');
                if (!window.draggableElm[column]) { window.draggableElm[column] = []};

                if (window.draggableElm[column].length <= 0) {
                    var blankDroppableElement = blankDroppable($("<div class='blank dotted-border'></div>"));
                    blankDroppableElement.insertBefore(ui.draggable);  
                    ui.draggable.attr('style', '');
                    $(ui.draggable).insertBefore($(this));
                } else {
                    var cloneElement = ui.draggable.clone(true).attr('style', '');
                    var oldClipElement = window.draggableElm[column][0];    
                    $(cloneElement).insertBefore($(ui.draggable));

                    $(ui.draggable)
                        .attr('style', '')
                        .insertBefore($(this));
                        
                    if (cloneElement.data('row') != oldClipElement.data('row')) {
                        $(this)
                            .insertBefore(oldClipElement)
                            .removeClass('dotted-border no-border');
                    
                        oldClipElement
                            .insertBefore(cloneElement)
                            .draggable( "enable" );
                        cloneElement.remove();
                    } else {
                        $(this)
                            .insertBefore(cloneElement)
                            .removeClass('dotted-border no-border');
                        delete window.draggableElm[column];
                        cloneElement.remove();
                        return;
                    }
                }
                window.draggableElm[column].push(ui.draggable);
                if (window.draggableElm[column].length == 2) {
                    updateClipRow(window.draggableElm[column]);
                    delete window.draggableElm[column];
                    return;
                };
                $(this).remove();
            }
        });
        return element;
    };

    function updateClipRow(clips) {
        var dbRow = clips[0].data('db-row');
        clips[0].attr('data-db-row', clips[1].data('db-row'));
        clips[1].attr('data-db-row', dbRow);

        var song_id = $("#song-clips").data('id');
        var clip = { clip: { row: clips[0].attr('data-db-row') } };
        var updateClipUrl = "/songs/"+song_id+"/clips/"+clips[0].data('id');
        updateClip(clip, updateClipUrl);

        clip = { clip: { row: clips[1].attr('data-db-row') } };
        updateClipUrl = "/songs/"+song_id+"/clips/"+clips[1].data('id');
        updateClip(clip, updateClipUrl);
    }

    function updateClip(clip, url) {
        $.ajax({
            type: "PUT",
            dataType: "json",
            url: url,
            contentType: 'application/json',
            data: JSON.stringify(clip)
        }).done(function( clip ){
            // console.log("Clip updated!!!", clip);
        });
    }

    $(document).on('ready page:load', function () { 
        window.wavesurfers = wavesurfers = {};
        window.draggableElm = {};
        updatePreview();
        // Intialize all sound clips for play
        setTimeout(function(){
            loadPartClips();    
        }, 500);

        clipDraggable($("#audio-clips .clip"), 'parent');
        blankDroppable($("#audio-clips .blank"));
        
        $(".clips .level.column").click(function(event){
            event.stopPropagation();
            var column = $(event.target).parent().data('column');
            if (!column) { return };
            if (column == index) { return };

            // Paused Sound Clips
            stopPartPlayers(true);

            $("#clips-"+index).removeClass('focus').removeClass('playing');
            index = column;

            isPartPlayerReady(column);
            showCurrentPartDetails();
            $(event.target).parent().addClass('focus');
            playNext();

            updatePreview();
        });

        $(".clips .part-play-btn").click(function(event){
            event.stopPropagation();
            var column = $(event.target).parent().data('column');
            if (!column) { return };
            if (column != index) { return };

            // Stop any signle player
            stopTopPlayer();
            stopClipPreviewPlayer(true);

            // Attach Listener
            addRemoveEventListener(true);

            // Play or Paused Sound Clips
            for (var i = 1; i <= 8; i++) {
                var wavesurfer = wavesurfers[index][i];
                if (wavesurfer.backend.isPaused()) {
                    $(event.target).parent().addClass('playing');
                    wavesurfer.play();
                } else {
                    $(event.target).parent().removeClass('playing');
                    wavesurfer.pause();
                }
            };
        });

        $(".clip").click(function(event){
            event.stopPropagation();
            var row = $(event.target).data('row');
            var column = $(event.target).parent().data('column');
            if (!row || !column) { return };
            if (!wavesurfers[column]) { return };

            var wavesurfer = wavesurfers[column][row];
            if (!wavesurfer) { return };

            $(event.target).toggleClass('muted');
            wavesurfer.toggleMute();
            
            var state = wavesurfer.isMuted ? true : false;
            $(event.target).updateState(state);
            var song_id = $(event.target).parents(".song-clips").data('id');
            var updateClipUrl = "/songs/"+song_id+"/clips/"+$(event.target).data('id')

            // Update song name
            var clip = { clip: { state: state } };
            if (configuration == 'style-up') {
              clip = { clip: { state2: state } };
            } else if (configuration == 'style-down') {
              clip = { clip: { state3: state } };
            }
            if (column == index) {
                updatePreviewForClip($(event.target).data('filetype'), state);    
            };
            updateClip(clip, updateClipUrl);
        });

        $(".clip .play-btn").click(function(event){
            event.stopPropagation();
            var row = $(event.target).parents('.clip').data('row');
            var column = $(event.target).parents('.clips').data('column');
            if (!row || !column) { return };

            stopTopPlayer();
            
            // If already playing same audio file
            if (clipPreviewPlayerRow == row && clipPreviewPlayerColumn == column) {
                if (clipPreviewPlayer.backend.isPaused()) {
                    $(event.target).addClass('paused');
                    clipPreviewPlayer.play();
                } else {
                    $(event.target).removeClass('paused');
                    clipPreviewPlayer.pause();    
                }
                return;
            };

            addRemoveEventListener(false);
            $(".clips.playing").removeClass('playing');
            stopPartPlayers(true);

            clipPreviewPlayerRow = row;
            clipPreviewPlayerColumn = column;
            stopClipPreviewPlayer(false);

            $(event.target).addClass('paused');
            clipPreviewPlayer = wavesurfers[column][row];
            clipPreviewPlayer.seekTo(0);
            clipPreviewPlayer.play();
            clipPreviewPlayer.on('finish', singleClipEndedCallback);
            window.isPartPlayerStarted = false;
        });
    });
 </script>
 <!-- Clips Segment Area End -->