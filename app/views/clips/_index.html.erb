<!-- Clips Segment Area Start -->
<div class="tracker-info">
	<% @song.clip_types.each_with_index do |clip_type, r| %>
		<% r += 1 %>
		<% if r == 5 %>
			<h6 id="level-blank">&nbsp</h6>
		<% end %>
		<h6 id="level-<%=r%>" data-id="<%= clip_type.id %>" class="<%='editable-text' if r >= 5%>"><span><%=clip_type.name%></span></h6>
	<% end %>
</div>
<% tab = 0 %>
<% @song.parts.each do |part| %>
	<% tab += 1 %>
    <% next if part.column == 0 %>
    <% c = part.column %>
    <div id="clips-<%=part.column%>" class="tracker-part part<%=part.column%> clips<%=' focus' if part.column == @currentIndex %>" data-column="<%=part.column%>">
	<div class="part-play-btn disabled"></div>
	<% r = 0 %>	
    <% part.clips.each do |clip| %>
        <% while r < clip.row %>
            <% r += 1 %>
            <% if r == 5 %>              
                <div class="blank">
                    <div class="play-btn"></div>
                </div>
            <% end %>
            <% if clip.row == r %>
                <div id="clip-part-<%=clip.id%>"
                       class="mixer-part clip clipstyle clip-<%=clip.row%><%=' muted' if clip.state%>"
                       data-id="<%=clip.id%>"
                       data-clip-type-id="<%=clip.clip_type_id%>"
                       data-part-id="<%=clip.part_id%>"
                       data-row="<%=r%>" data-db-row="<%=clip.row%>"
                       data-col="<%=c%>" data-db-col="<%=clip.column%>"
                       data-path="<%=clip.file%>" data-path-aac="<%=clip.file_aac%>"
                       data-state1="<%=clip.state%>" data-state2="<%=clip.state2%>" data-state3="<%=clip.state3%>"
                       data-duration="<%=clip.duration%>"
                       data-user-content="<%=clip.allow_ugc%>"
                      >
                    <div class="progress"></div>
                    <div class="opaque-gray"></div>
                    <div class="play-btn fa fa-play"></div>
                    <% if clip.allow_ugc %>
                        <div class="user-content">0</div>
                    <% end %>
                </div>
            <% else %>
                <div id="clip-part-<%=clip.id%>"
                       class="mixer-part clip clipstyle clip-<%=r%><%=' muted' if clip.state%>"
                       data-id="<%=clip.id-1%>"
                       data-row="<%=r%>" data-db-row="<%=clip.row%>"
                       data-path="<%=clip.file%>" data-path-aac="<%=clip.file_aac%>"
                       data-col="<%=c%>" data-db-col="<%=clip.column%>"
                       data-duration="<%=clip.duration%>"
                       data-valid="00"
                       rel="popover"
                       data-toggle="popover" data-trigger="focus" tabindex="0"
                       data-popover-content="#myPopover"
                      >
                    <p class="p-click"> click to fix </p>
                    <% # TODO: this needs to be rendered outside of this loop, only need one block %>
                    <div id="myPopover" class="hide">
                      <b>Resolve missing file:</b>
                      <ul class="missing_file_pop">
                        <% @bad_clips.each do |t| %>
                            <li id="<%=t.id%>" data-duration="<%=t.duration%>" > <%= t.original_filename %> </li>
                        <% end %>
                      </ul>
                    </div>
                </div>
            <% end %>
        <% end %>
    <% end %>
      <div class="level column editable-text" data-id="<%=part.id%>" data-name="<%=part.name%>" data-time="<%= Time.at(part.duration).utc.strftime("%M:%S") %>">
        <span tabindex="<%=tab%>"><%=part.name%></span>
      </div>
    </div>
<% end %>
<script type="text/javascript">
  $('.editable-text').on('click focus',
			'span',
			function (e) {
				var topparent = $($(e.target).parent());
				var classnm=$(e.target).attr('tabindex');
				$($(e.target).parent()).html('<input type="text" tabindex="'+ classnm +'" data-originalvalue="' + $(e.target).text() + '" value="' + $(e.target).text() + '">')
						.off('blur keyup', 'input').on('blur keyup',
						'input',
						function(e) {
							if (e.type == 'keyup') {
								var key = e.keyCode || e.which;
								if (key == 13 || 0) {
									$(this).blur();
								}
								return;
							}
							e.stopPropagation();
							var parent = $(e.target).parent();
							$(parent).html('<span tabindex="'+classnm+'">' + $(e.target).val() + '</span>');

							var url = '';
							if (parent.hasClass("songtitle")) {
								url = '/songs/' + <%=@song.id%>;
							}
							else {
								var dataId = parent.attr('data-id');
								if (typeof dataId !== typeof undefined && dataId !== false) {
									if (parent.hasClass("level")) {
										url = '/songs/' + <%=@song.id%> +'/parts/' + dataId;
									}
									else {
										url = '/songs/' + <%=@song.id%> +'/clip_types/' + dataId;
									}
								}
							}
							if (url.length) {
								$.ajax({
									type: "PUT",
									dataType: "json",
									url: url,
									contentType: 'application/json',
									data: JSON.stringify({name: $(e.target).val() })
								})
								.done(function( msg ) {
									console.log( "Data Saved: " + msg );
								})
								.fail(function( msg ) {
									console.log(  msg );
								});
							}
						});
				topparent.children('input')[0].focus();
				var tmpStr = $(topparent.children('input')[0]).val();
				$(topparent.children('input')[0]).val('');
				$(topparent.children('input')[0]).val(tmpStr);
			});

	// Predefined Varibales
	var loadColumn = 1;
	window.sColumn = <%= @currentIndex %>;
	window.clipPreviewPlayer = false;
	window.clipPreviewPlayerRow = 0;
	window.clipPreviewPlayerColumn = 0;

	$.fn.state = function() {
		var state = false;
		if (window.configuration == 'mix2') {
			state = $(this).attr('data-state2');
		} else if (window.configuration == 'mix3') {
			state = $(this).attr('data-state3');
		} else {
			state = $(this).attr('data-state1');
		}
		return (state == 'true');
	}

	$.fn.updateState = function(state) {
		if (window.configuration == 'mix2') {
			$(this).attr('data-state2', state);
		} else if (window.configuration == 'mix3') {
			$(this).attr('data-state3', state);
		} else {
			$(this).attr('data-state1', state);
		}
	}

	updatePreview = function() {		
		$(".wing").removeClass('muted');
		$("#tracker-mixer #clips-"+sColumn).each(function(){
			$(this).find('.clip').each(function(){
				if ($(this).state()) {
					var row = $(this).data('row');
					$(".wing"+row).addClass('muted');
				}
			});
		});
	}

	updatePreviewPlayBtn = function(playing) {
		$("#preview .playBtn").removeClass('playing');
		if (playing) {
			$("#preview .playBtn").addClass('playing');
		}
	}

	updatePreviewForClip = function(row, state) {
		$(".wing"+row).removeClass('muted');
		if (state) {
			$(".wing"+row).addClass('muted');
		}
	}

	loadPartClips = function() {
		var wavesurfer = null;
		$("#tracker-mixer #clips-"+loadColumn).each(function(){
			var column = $(this).attr('data-column');
			if (!wavesurfers[column]) wavesurfers[column] = {};
			$(this).find('.clip').each(function(){
        path = canPlayOgg() ? $(this).data('path') : $(this).data('path-aac');
				wavesurferPlayer(this, path, $(this).state(), column, $(this).attr('data-row'));

			})
		});
	}

	reInitializeClipsState = function() {		
		$("#tracker-mixer .clips").each(function(){
			var column = $(this).attr('data-column');
			$(this).find('.clip').each(function(){
				$(this).removeClass('muted');
				if ($(this).state()) { $(this).addClass('muted'); }
				if (wavesurfers[column]) {
					var row = $(this).attr('data-row');
					var wavesurfer = wavesurfers[column][row];
					if (wavesurfer) {
						if (($(this).state() && !wavesurfer.isMuted) || (!$(this).state() && wavesurfer.isMuted)) {
							wavesurfer.toggleMute();
						}
					}
				}
			});
		});
	}

	wavesurferPlayer = function(container, src, mute, column, row) {
		var wavesurfer = Object.create(WaveSurfer);
		wavesurfer.row = row;
		wavesurfer.column = column;
		wavesurfer.init({
			container: container,
			fillParent: true,
			height: 20,
			waveColor: 'black',
			progressColor: 'black',
			splitChannels: true,
			cursorWidth: 2,
			cursorColor: "yellow"
		});
		wavesurfer.on('ready', function (_this) {
			$(_this.container).addClass('loaded');
			if ($(_this.container).state()) {
				if (!_this.isMuted) {
					_this.toggleMute();
				}
			}

			if (wavesurfers[_this.column][0]) {
				var tWavesurfer = wavesurfers[_this.column][0];
				if (tWavesurfer && tWavesurfer.getCurrentTime() > 0) {
					_this.seekTo(tWavesurfer.getCurrentTime() / tWavesurfer.getDuration());
				}
			}

			isPartPlayerReady(_this.column);
			if (isAllClipsLoadedOfThisPart(_this.column)) {
				// console.log(_this.column+" Part player is ready!");
				if (sColumn == _this.column) addRemoveEventListener(true);
				if (loadColumn <= 7) {
					loadColumn++;
					loadPartClips();
				}
			}
		});

		wavesurfer.on('loading', function (_this, progress) {
			$(_this.container).children(".progress").css("left", progress+"%");	
		});

		wavesurfer.load(src);
		wavesurfers[column][row] = wavesurfer;		
	}

	isAllClipsLoadedOfThisPart = function(column) {
		var clipColumn = $("#clips-"+column);
		if (clipColumn.children(".clip.loaded").length == 8) return true;
		return false;
	}

	isPartPlayerReady = function(column) {
		if (isAllClipsLoadedOfThisPart(column)) {
			$("#clips-"+column).children(".part-play-btn").removeClass('disabled');
		}
	}

	playNext = function() {
		if (sColumn > $("#tracker-mixer .clips").length) { return }
		addRemoveEventListener(true);
	}

	function addRemoveEventListener(addListener) {
		if (!wavesurfers[sColumn]) { return }
		var wavesurfer = wavesurfers[sColumn]['0'];
		if (wavesurfer) {
			wavesurfer.un('finish', clipEndedCallback);
			wavesurfer.un('finish', singleClipEndedCallback);
			if (addListener) {
				wavesurfer.on('finish', clipEndedCallback);
			}
		}
	}

	clipEndedCallback = function() {
		if (sColumn == 8) {
			$(".full-play-btn").removeClass('playing');
			$("#clips-"+sColumn).removeClass('playing');			
			stopPartPlayers(true);
			return;
		}
		$("#clips-"+sColumn+", #clips-"+sColumn+"0").removeClass('focus playing');
		if (sColumn < 8) sColumn++;
		$("#clips-"+sColumn+", #clips-"+sColumn+"0").addClass('focus playing');
		showCurrentPartDetails();
		playNext();

		for (var i = 0; i <= 8; i++) {
			var wavesurfer = wavesurfers[sColumn][i];
			if (wavesurfer) {
				wavesurfer.play();
			}
		}
		// topWavesurfers[sColumn].play();;
	}

	pausePartPlayer = function() {
		if (!wavesurfers[sColumn]) { return }
		$(".clips.focus").removeClass('playing');
		for (var i = 0; i <= 8; i++) {
			var wavesurfer = wavesurfers[sColumn][i];
			if (wavesurfer) {
				if (!wavesurfer.backend.isPaused()) wavesurfer.pause();
			}
		}
	}

	stopPartPlayers = function(seek) {
		if (!wavesurfers[sColumn]) { return }
		for (var i = 0; i <= 8; i++) {
			var wavesurfer = wavesurfers[sColumn][i];
			if (wavesurfer) {
				wavesurfer.seekTo(0);
				if (!wavesurfer.backend.isPaused()) wavesurfer.pause();
			}
		}
	}

	// Intialize all sound clips for play
	// intializeSoundClips();
	showCurrentPartDetails = function() {
		var partElement = $("#clips-"+sColumn).children(".level.column");
		$("#part-time").html("Time: "+partElement.data('time'));
		$("#part-info .name")
				.attr('data-name', partElement.attr('data-name'))
				.text("Name: "+partElement.attr('data-name'))
		var songID = $("#song-clips").data('id');
		var partID = partElement.data('id');
		$("#part-info form").attr('action', "/songs/"+songID+"/parts/"+partID);
		showUserContent();
	}

	function showUserContent() {
		var userContents = "";
		$("#audio-clips #clips-"+sColumn+" .clip").each(function(){
			console.log("", $(this).data('user-content'));
			if ($(this).data('user-content')) {
				var row = $(this).data('row');
				levelName = $("#level-"+row).text();
				userContents += " ["+levelName+"]";
			}
		});
		$("p#user-content").text("User Content :"+userContents);
	}

	singleClipEndedCallback = function() {
		if (clipPreviewPlayer) {
			clipPreviewPlayer.seekTo(0);
			if (!clipPreviewPlayer.backend.isPaused()) clipPreviewPlayer.pause();
			$(".play-btn").removeClass("paused");
		}
	}

	pauseClipPreviewPlayer = function() {
		if (clipPreviewPlayer) {
			$(".play-btn").removeClass("paused");
			if (!clipPreviewPlayer.backend.isPaused()) clipPreviewPlayer.pause();
		}
	}

	stopClipPreviewPlayer = function(reset) {
		if (clipPreviewPlayer) {
			$(".play-btn").removeClass("paused");
			clipPreviewPlayer.seekTo(0);
			if (!clipPreviewPlayer.backend.isPaused()) clipPreviewPlayer.pause();
			clipPreviewPlayer.un('finish', singleClipEndedCallback);
			if (reset && clipPreviewPlayerRow != 0) {
				clipPreviewPlayerRow = clipPreviewPlayerColumn= 0;
				playNext();
			}
			clipPreviewPlayer = false;
		}
	}

	function clipDraggable(element, containment) {
		element.draggable({
			start: function( event, ui ) {
				if ($(event.target).attr('data-valid').match('00')) return false;
			},
			revert: true,
			containment: containment,
			axis: "y",
			zIndex: 1000
		});
	}

	function blankDroppable(element) {
		element.droppable({
			drop: function( event, ui ) {
				var column = $(this).parent().data('column');
				if (!window.draggableElm[column]) { window.draggableElm[column] = []}

				if (window.draggableElm[column].length <= 0) {
					var blankDroppableElement = blankDroppable($("<div class='blank dotted-border'></div>"));
					blankDroppableElement.insertBefore(ui.draggable);
					ui.draggable.attr('style', '');
					$(ui.draggable).insertBefore($(this));
				} else {
					var cloneElement = ui.draggable.clone(true).attr('style', '');
					var oldClipElement = window.draggableElm[column][0];
					$(cloneElement).insertBefore($(ui.draggable));

					$(ui.draggable)
							.attr('style', '')
							.insertBefore($(this));

					if (cloneElement.data('row') != oldClipElement.data('row')) {
						$(this)
								.insertBefore(oldClipElement)
								.removeClass('dotted-border no-border');

						oldClipElement
								.insertBefore(cloneElement)
								.draggable( "enable" );
						cloneElement.remove();
					} else {
						$(this)
								.insertBefore(cloneElement)
								.removeClass('dotted-border no-border');
						delete window.draggableElm[column];
						cloneElement.remove();
						return;
					}
				}
				window.draggableElm[column].push(ui.draggable);
				if (window.draggableElm[column].length == 2) {
					updateClipRow(window.draggableElm[column]);
					delete window.draggableElm[column];
					return;
				}
				$(this).remove();
			}
		});
		return element;
	}

	function updateClipRow(clips) {
		var dbRow = clips[0].attr('data-db-row');
		clips[0].attr('data-db-row', clips[1].attr('data-db-row'));
		clips[1].attr('data-db-row', dbRow);

		var song_id = $("#song-clips").data('id');
		var clip = { clip: { row: clips[0].attr('data-db-row') } };
		var updateClipUrl = "/songs/"+song_id+"/clips/"+clips[0].data('id');
		updateClip(clip, updateClipUrl);

		clip = { clip: { row: clips[1].attr('data-db-row') } };
		updateClipUrl = "/songs/"+song_id+"/clips/"+clips[1].data('id');
		updateClip(clip, updateClipUrl);
	}

	function updateClip(clip, url) {
		$.ajax({
			type: "PUT",
			dataType: "json",
			url: url,
			contentType: 'application/json',
			data: JSON.stringify(clip)
		}).done(function( clip ){
			// console.log("Clip updated!!!", clip);
		});
	}

  function canPlayOgg() {
    var a = document.createElement('audio');
    return !!(a.canPlayType && a.canPlayType('audio/ogg;').replace(/no/, ''));
  }

  function documentReadyExcutables() {
    // window.wavesurfers = wavesurfers = {};
    // window.draggableElm = {};
    updatePreview();
    // Intialize all sound clips for play
    setTimeout(function(){
      loadPartClips();
      showUserContent();
    }, 500);

    clipDraggable($("#tracker-mixer .clip"), 'parent');
    blankDroppable($("#tracker-mixer .blank"));

    $(".clips .level.column").click(function(event){
      event.stopPropagation();
      var column = $(event.target).parent().data('column');
      if (!column) { return }
      if (column == sColumn) { return }

      // Paused Sound Clips
      $(".full-play-btn").removeClass('playing');
      stopPartPlayers(true);

      $("#clips-"+sColumn+", #clips-"+sColumn+"0").removeClass('focus playing');
      sColumn = column;

      isPartPlayerReady(column);
      showCurrentPartDetails();
      $("#clips-"+sColumn+", #clips-"+sColumn+"0").addClass('focus');
      playNext();

      updatePreview();
    });

    $(".clips .part-play-btn").click(function(event){
      event.stopPropagation();
      var column = $(event.target).parent().data('column');
      if (!column) { return }
      if (column != sColumn) { return }

      // Stop any signle player
      stopTopPlayer();
      stopClipPreviewPlayer(true);

      // Attach Listener
      addRemoveEventListener(true);

      // Play or Paused Sound Clips
      for (var i = 1; i <= 8; i++) {
        var wavesurfer = wavesurfers[sColumn][i];
        if (wavesurfer.backend.isPaused()) {
          $(event.target).parent().addClass('playing');
          wavesurfer.play();
        } else {
          $(event.target).parent().removeClass('playing');
          wavesurfer.pause();
        }
      }
    });

    $(".clip").click(function(event){
      event.stopPropagation();
      var row = $(event.target).data('row');
      var column = $(event.target).parent().data('column');
      if (!row || !column) { return }
      if (!wavesurfers[column]) { return }

      var wavesurfer = wavesurfers[column][row];
      if (!wavesurfer) { return }

      $(event.target).toggleClass('muted');
      wavesurfer.toggleMute();

      var state = wavesurfer.isMuted ? true : false;
      $(event.target).updateState(state);
      var song_id = $("#song-clips").data('id');
      var updateClipUrl = "/songs/"+song_id+"/clips/"+$(event.target).data('id')

      // Update song name
      var clip = { clip: { state: state } };
      if (configuration == 'mix2') {
        clip = { clip: { state2: state } }
      } else if (configuration == 'mix3') {
        clip = { clip: { state3: state } }
      }
      if (column == sColumn) {
        updatePreviewForClip($(event.target).data('row'), state);
      }
      updateClip(clip, updateClipUrl);
    });

    $(".clip .play-btn").click(function(event){
      event.stopPropagation();
      var row = $(event.target).parents('.clip').data('row');
      var column = $(event.target).parents('.clips').data('column');
      if (!row || !column) { return }

      stopTopPlayer();

      // If already playing same audio file
      if (clipPreviewPlayerRow == row && clipPreviewPlayerColumn == column) {
        if (clipPreviewPlayer.backend.isPaused()) {
          $(event.target).addClass('paused');
          clipPreviewPlayer.play();
        } else {
          $(event.target).removeClass('paused');
          clipPreviewPlayer.pause();
        }
        return;
      }

      addRemoveEventListener(false);
      $(".clips.playing").removeClass('playing');
      stopPartPlayers(true);

      clipPreviewPlayerRow = row;
      clipPreviewPlayerColumn = column;
      stopClipPreviewPlayer(false);

      $(event.target).addClass('paused');
      clipPreviewPlayer = wavesurfers[column][row];
      clipPreviewPlayer.seekTo(0);
      clipPreviewPlayer.play();
      clipPreviewPlayer.on('finish', singleClipEndedCallback);
      window.isPartPlayerStarted = false;
    });
  }

  $(document).on('ready page:load', function () {
    documentReadyExcutables();
  });


</script>
<!-- Clips Segment Area End -->